import React, { useState, useEffect } from 'react';
import { Search, MapPin, TrendingUp, Clock, AlertTriangle, Filter, Calendar, Tag, RefreshCw, Eye, ExternalLink, BarChart3, Users, Activity, ArrowRight, Heart, MessageSquare, Share2, Bookmark, ThumbsUp, X, Bell } from 'lucide-react';
import { Link } from 'react-router-dom';
import { getBlogs, getSignals, getEvents } from '../lib/supabase';
import { generateBlogContent } from '../lib/openai';

const BlogPage = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedFilter, setSelectedFilter] = useState('all');
  const [blogPosts, setBlogPosts] = useState([]);
  const [signals, setSignals] = useState([]);
  const [events, setEvents] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedBlog, setSelectedBlog] = useState(null);
  const [expandedBlogContent, setExpandedBlogContent] = useState({});
  const [isGeneratingContent, setIsGeneratingContent] = useState({});

  useEffect(() => {
    loadBlogs();
  }, []);

  const loadBlogs = async () => {
    setIsLoading(true);
    try {
      const [blogsResult, signalsResult, eventsResult] = await Promise.all([
        getBlogs(),
        getSignals(),
        getEvents()
      ]);
      
      if (blogsResult.data) {
        setBlogPosts(blogsResult.data);
      }
      
      if (signalsResult.data) {
        setSignals(signalsResult.data);
      }
      
      if (eventsResult.data) {
        setEvents(eventsResult.data);
      }
    } catch (error) {
      console.error('Error loading blogs:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const generateDetailedBlogContent = async (blog) => {
    if (expandedBlogContent[blog.id] || isGeneratingContent[blog.id]) {
      return;
    }

    setIsGeneratingContent(prev => ({ ...prev, [blog.id]: true }));

    try {
      // Find related event and signals
      const relatedEvent = events.find(event => 
        event.title.toLowerCase().includes(blog.title.toLowerCase()) ||
        event.location.toLowerCase().includes(blog.title.toLowerCase())
      );

      const relatedSignals = signals.filter(signal => 
        blog.title.toLowerCase().includes(signal.location.toLowerCase()) ||
        blog.title.toLowerCase().includes(signal.type.toLowerCase())
      );

      // Create event data for blog generation
      const eventData = relatedEvent || {
        title: blog.title,
        location: extractLocationFromTitle(blog.title),
        event_type: extractTypeFromTitle(blog.title),
        severity: getSeverityFromTitle(blog.title),
        status: 'active',
        signal_count: relatedSignals.length || 10,
        description: blog.content.substring(0, 200) + '...'
      };

      const detailedContent = await generateBlogContent(eventData, relatedSignals);
      
      setExpandedBlogContent(prev => ({
        ...prev,
        [blog.id]: detailedContent
      }));
    } catch (error) {
      console.error('Error generating detailed blog content:', error);
      // Fallback content
      setExpandedBlogContent(prev => ({
        ...prev,
        [blog.id]: `Health Alert: ${blog.title}

${blog.content}

Additional Analysis

Our AI monitoring system continues to track this situation and will provide updates as new information becomes available.

Recommended Actions

- Stay informed through official health channels
- Follow local health authority guidance
- Monitor symptoms and seek medical attention if needed
- Practice good hygiene and preventive measures

This detailed analysis was generated by Prevora AI based on current health signal data.`
      }));
    } finally {
      setIsGeneratingContent(prev => ({ ...prev, [blog.id]: false }));
    }
  };

  const extractLocationFromTitle = (title) => {
    const match = title.match(/in\s+([^,\n]+)/i);
    return match ? match[1] : 'Unknown Location';
  };

  const extractTypeFromTitle = (title) => {
    if (title.toLowerCase().includes('cough')) return 'Cough';
    if (title.toLowerCase().includes('fever')) return 'Fever';
    if (title.toLowerCase().includes('respiratory')) return 'Respiratory';
    if (title.toLowerCase().includes('wastewater')) return 'Wastewater';
    return 'Health';
  };

  const getSeverityFromTitle = (title) => {
    if (title.includes('URGENT')) return 'high';
    if (title.includes('Alert')) return 'medium';
    return 'low';
  };

  const getLocationFromTitle = (title) => {
    const match = title.match(/in\s+([^,\n]+)/i);
    return match ? match[1] : 'Unknown Location';
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'high': return 'from-red-500 to-orange-500';
      case 'medium': return 'from-yellow-500 to-orange-500';
      case 'low': return 'from-green-500 to-teal-500';
      default: return 'from-gray-500 to-slate-500';
    }
  };

  const getSeverityBg = (severity) => {
    switch (severity) {
      case 'high': return 'bg-red-50 border-red-200';
      case 'medium': return 'bg-yellow-50 border-yellow-200';
      case 'low': return 'bg-green-50 border-green-200';
      default: return 'bg-gray-50 border-gray-200';
    }
  };

  const getTypeIcon = (title) => {
    if (title.toLowerCase().includes('cough')) return <AlertTriangle className="h-5 w-5" />;
    if (title.toLowerCase().includes('wastewater')) return <MapPin className="h-5 w-5" />;
    if (title.toLowerCase().includes('pharmacy')) return <TrendingUp className="h-5 w-5" />;
    if (title.toLowerCase().includes('environmental')) return <Filter className="h-5 w-5" />;
    return <Tag className="h-5 w-5" />;
  };

  const filteredPosts = blogPosts.filter(post => {
    const matchesSearch = post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         post.content.toLowerCase().includes(searchTerm.toLowerCase());
    const severity = getSeverityFromTitle(post.title);
    const matchesFilter = selectedFilter === 'all' || severity === selectedFilter;
    return matchesSearch && matchesFilter;
  });

  const filterOptions = [
    { value: 'all', label: 'All Posts' },
    { value: 'high', label: 'Urgent Alerts' },
    { value: 'medium', label: 'Health Alerts' },
    { value: 'low', label: 'Health Notices' }
  ];

  const formatContent = (content) => {
    // Extract first paragraph or summary
    const lines = content.split('\n').filter(line => line.trim());
    const firstParagraph = lines.find(line => 
      !line.startsWith('#') && 
      !line.startsWith('|') && 
      !line.startsWith('-') && 
      !line.startsWith('*') &&
      line.length > 50
    );
    return firstParagraph || content.substring(0, 200) + '...';
  };

  const handleBlogClick = (blog) => {
    setSelectedBlog(blog);
    generateDetailedBlogContent(blog);
  };

  const getRandomImage = (seed) => {
    const images = [
      'https://images.pexels.com/photos/3938022/pexels-photo-3938022.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
      'https://images.pexels.com/photos/3957987/pexels-photo-3957987.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
      'https://images.pexels.com/photos/4167541/pexels-photo-4167541.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
      'https://images.pexels.com/photos/3957986/pexels-photo-3957986.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
      'https://images.pexels.com/photos/4386466/pexels-photo-4386466.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2'
    ];
    
    // Use the seed to deterministically select an image
    const index = seed.charCodeAt(0) % images.length;
    return images[index];
  };

  const renderDetailedBlog = () => {
    if (!selectedBlog) return null;

    const content = expandedBlogContent[selectedBlog.id] || selectedBlog.content;
    const formattedContent = content
      .replace(/^# (.*?)$/gm, '<h1 class="text-3xl font-bold text-gray-900 mb-4">$1</h1>')
      .replace(/^## (.*?)$/gm, '<h2 class="text-2xl font-bold text-gray-900 mt-6 mb-3">$1</h2>')
      .replace(/^### (.*?)$/gm, '<h3 class="text-xl font-bold text-gray-900 mt-5 mb-2">$1</h3>')
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/^- (.*?)$/gm, '<li class="ml-4 mb-1 flex items-start"><span class="inline-block w-2 h-2 bg-blue-600 rounded-full mr-2 mt-2 flex-shrink-0"></span><span>$1</span></li>')
      .replace(/\n\n/g, '<br><br>');

    const severity = getSeverityFromTitle(selectedBlog.title);
    const location = getLocationFromTitle(selectedBlog.title);
    const type = extractTypeFromTitle(selectedBlog.title);

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl shadow-2xl max-w-5xl w-full max-h-[90vh] overflow-y-auto">
          {/* Header */}
          <div className="relative">
            <img 
              src={getRandomImage(selectedBlog.id)} 
              alt="Health alert" 
              className="w-full h-64 object-cover rounded-t-2xl"
            />
            <div className="absolute inset-0 bg-gradient-to-b from-transparent to-black opacity-70 rounded-t-2xl"></div>
            <div className="absolute bottom-0 left-0 p-6 text-white">
              <div className="flex items-center space-x-3 mb-3">
                <div className={`px-3 py-1 rounded-full bg-gradient-to-r ${getSeverityColor(severity)} text-white text-xs font-semibold uppercase`}>
                  {severity === 'high' ? 'URGENT' : severity === 'medium' ? 'ALERT' : 'NOTICE'}
                </div>
                <div className="px-3 py-1 bg-blue-600 text-white rounded-full text-xs font-medium">
                  {type}
                </div>
              </div>
              <h2 className="text-3xl font-bold mb-2">{selectedBlog.title}</h2>
              <div className="flex items-center text-gray-300 text-sm">
                <div className="flex items-center mr-4">
                  <Calendar className="h-4 w-4 mr-1" />
                  {new Date(selectedBlog.published_at).toLocaleDateString()}
                </div>
                <div className="flex items-center mr-4">
                  <MapPin className="h-4 w-4 mr-1" />
                  {location}
                </div>
                <div className="flex items-center">
                  <Users className="h-4 w-4 mr-1" />
                  {selectedBlog.author}
                </div>
              </div>
            </div>
            <button
              onClick={() => setSelectedBlog(null)}
              className="absolute top-4 right-4 p-2 bg-black bg-opacity-50 text-white rounded-full hover:bg-opacity-70 transition-colors"
            >
              <X className="h-5 w-5" />
            </button>
          </div>

          {/* Content */}
          <div className="p-8">
            {isGeneratingContent[selectedBlog.id] ? (
              <div className="flex items-center justify-center py-16">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                <span className="ml-3 text-gray-600">Generating detailed analysis...</span>
              </div>
            ) : (
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                {/* Main Content */}
                <div className="lg:col-span-2">
                  <div className="prose prose-lg max-w-none">
                    <div dangerouslySetInnerHTML={{ __html: formattedContent }} />
                  </div>

                  {/* Visual Data Representations */}
                  <div className="mt-8 grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div className="bg-blue-50 rounded-lg p-4">
                      <div className="flex items-center space-x-2 mb-2">
                        <BarChart3 className="h-5 w-5 text-blue-600" />
                        <h4 className="font-semibold text-blue-900">Signal Analysis</h4>
                      </div>
                      <div className="text-2xl font-bold text-blue-900">{signals.length}</div>
                      <div className="text-sm text-blue-700">Total signals detected</div>
                    </div>
                    
                    <div className="bg-green-50 rounded-lg p-4">
                      <div className="flex items-center space-x-2 mb-2">
                        <Users className="h-5 w-5 text-green-600" />
                        <h4 className="font-semibold text-green-900">Population Impact</h4>
                      </div>
                      <div className="text-2xl font-bold text-green-900">45K</div>
                      <div className="text-sm text-green-700">People in affected area</div>
                    </div>
                    
                    <div className="bg-purple-50 rounded-lg p-4">
                      <div className="flex items-center space-x-2 mb-2">
                        <Activity className="h-5 w-5 text-purple-600" />
                        <h4 className="font-semibold text-purple-900">Detection Speed</h4>
                      </div>
                      <div className="text-2xl font-bold text-purple-900">14h</div>
                      <div className="text-sm text-purple-700">Earlier than traditional methods</div>
                    </div>
                  </div>

                  {/* Interactive Elements */}
                  <div className="mt-8 flex items-center justify-between border-t border-b border-gray-200 py-4">
                    <div className="flex items-center space-x-4">
                      <button className="flex items-center space-x-1 text-gray-600 hover:text-blue-600">
                        <ThumbsUp className="h-5 w-5" />
                        <span>Helpful</span>
                      </button>
                      <button className="flex items-center space-x-1 text-gray-600 hover:text-blue-600">
                        <Share2 className="h-5 w-5" />
                        <span>Share</span>
                      </button>
                      <button className="flex items-center space-x-1 text-gray-600 hover:text-blue-600">
                        <Bookmark className="h-5 w-5" />
                        <span>Save</span>
                      </button>
                    </div>
                    <div className="flex items-center space-x-1 text-gray-500 text-sm">
                      <Eye className="h-4 w-4" />
                      <span>1.2K views</span>
                    </div>
                  </div>
                </div>

                {/* Sidebar */}
                <div className="lg:col-span-1">
                  {/* Author Info */}
                  <div className="bg-gray-50 rounded-lg p-6 mb-6">
                    <h4 className="font-bold text-gray-900 mb-3">About the Author</h4>
                    <div className="flex items-center space-x-3 mb-3">
                      <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                        <Users className="h-6 w-6 text-blue-600" />
                      </div>
                      <div>
                        <p className="font-medium text-gray-900">{selectedBlog.author}</p>
                        <p className="text-sm text-gray-600">Health Intelligence System</p>
                      </div>
                    </div>
                    <p className="text-sm text-gray-600">
                      Prevora AI analyzes health signals in real-time to provide early warnings and actionable insights for communities.
                    </p>
                  </div>

                  {/* Related Content */}
                  <div className="bg-gray-50 rounded-lg p-6 mb-6">
                    <h4 className="font-bold text-gray-900 mb-3">Related Alerts</h4>
                    <div className="space-y-4">
                      {events.slice(0, 3).map((event, index) => (
                        <Link key={index} to={`/event/${event.id}`} className="block">
                          <div className="flex items-start space-x-3">
                            <div className={`w-2 h-2 mt-1.5 rounded-full ${getSeverityColor(event.severity)}`}></div>
                            <div>
                              <p className="font-medium text-gray-900 text-sm">{event.title}</p>
                              <p className="text-xs text-gray-500">{new Date(event.created_at).toLocaleDateString()}</p>
                            </div>
                          </div>
                        </Link>
                      ))}
                    </div>
                  </div>

                  {/* Quick Actions */}
                  <div className="bg-blue-50 rounded-lg p-6">
                    <h4 className="font-bold text-gray-900 mb-3">Quick Actions</h4>
                    <div className="space-y-3">
                      <Link to="/dashboard" className="flex items-center justify-between p-3 bg-white rounded-lg hover:bg-blue-100 transition-colors">
                        <div className="flex items-center space-x-2">
                          <BarChart3 className="h-5 w-5 text-blue-600" />
                          <span className="font-medium text-gray-900">View Dashboard</span>
                        </div>
                        <ArrowRight className="h-4 w-4 text-gray-400" />
                      </Link>
                      <Link to="/alerts" className="flex items-center justify-between p-3 bg-white rounded-lg hover:bg-blue-100 transition-colors">
                        <div className="flex items-center space-x-2">
                          <AlertTriangle className="h-5 w-5 text-orange-600" />
                          <span className="font-medium text-gray-900">All Alerts</span>
                        </div>
                        <ArrowRight className="h-4 w-4 text-gray-400" />
                      </Link>
                      <button className="flex items-center justify-between p-3 bg-white rounded-lg hover:bg-blue-100 transition-colors w-full">
                        <div className="flex items-center space-x-2">
                          <Bell className="h-5 w-5 text-purple-600" />
                          <span className="font-medium text-gray-900">Subscribe to Updates</span>
                        </div>
                        <ArrowRight className="h-4 w-4 text-gray-400" />
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-white pt-20">
      {/* Hero Section */}
      <section className="py-20 bg-gradient-to-br from-blue-50 via-purple-50 to-teal-50">
        <div className="container mx-auto px-6">
          <div className="max-w-4xl mx-auto text-center">
            <h1 className="text-5xl md:text-6xl font-bold text-gray-900 mb-6">
              Live Health <span className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">Insights</span>
            </h1>
            <p className="text-xl text-gray-600 mb-8 leading-relaxed">
              Real-time analysis of health signals, alerts, and prevention tips. Our AI system explains what the data means, 
              how to stay safe, and shares verified updates from health authorities.
            </p>
            
            {/* Search and Filter */}
            <div className="max-w-2xl mx-auto">
              <div className="flex flex-col sm:flex-row gap-4">
                <div className="relative flex-1">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                  <input
                    type="text"
                    placeholder="Search health alerts and insights..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                <select
                  value={selectedFilter}
                  onChange={(e) => setSelectedFilter(e.target.value)}
                  className="px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  {filterOptions.map(option => (
                    <option key={option.value} value={option.value}>{option.label}</option>
                  ))}
                </select>
                <button
                  onClick={loadBlogs}
                  className="px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2"
                >
                  <RefreshCw className="h-4 w-4" />
                  <span>Refresh</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Blog Posts */}
      <section className="py-20 bg-white">
        <div className="container mx-auto px-6">
          <div className="max-w-6xl mx-auto">
            {isLoading ? (
              <div className="flex items-center justify-center py-16">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                <span className="ml-3 text-gray-600">Loading health insights...</span>
              </div>
            ) : (
              <>
                <div className="flex items-center justify-between mb-8">
                  <h2 className="text-2xl font-bold text-gray-900">
                    Latest Health Insights ({filteredPosts.length})
                  </h2>
                  {blogPosts.length > 0 && (
                    <p className="text-sm text-gray-600">
                      Last updated: {new Date(blogPosts[0]?.published_at).toLocaleString()}
                    </p>
                  )}
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                  {filteredPosts.map((post) => {
                    const severity = getSeverityFromTitle(post.title);
                    const location = getLocationFromTitle(post.title);
                    
                    return (
                      <article 
                        key={post.id} 
                        className="bg-white rounded-xl shadow-lg overflow-hidden border border-gray-200 hover:shadow-xl transition-all duration-300 group cursor-pointer"
                        onClick={() => handleBlogClick(post)}
                      >
                        <div className="relative h-48">
                          <img 
                            src={getRandomImage(post.id)} 
                            alt={post.title}
                            className="w-full h-full object-cover"
                          />
                          <div className="absolute top-4 left-4 flex space-x-2">
                            <div className={`px-3 py-1 rounded-full bg-gradient-to-r ${getSeverityColor(severity)} text-white text-xs font-semibold uppercase`}>
                              {severity === 'high' ? 'URGENT' : severity === 'medium' ? 'ALERT' : 'NOTICE'}
                            </div>
                            <div className="px-3 py-1 bg-white text-gray-800 rounded-full text-xs font-medium">
                              {extractTypeFromTitle(post.title)}
                            </div>
                          </div>
                        </div>

                        <div className="p-6">
                          <div className="flex items-center space-x-4 text-sm text-gray-500 mb-3">
                            <div className="flex items-center space-x-1">
                              <MapPin className="h-4 w-4" />
                              <span>{location}</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Calendar className="h-4 w-4" />
                              <span>{new Date(post.published_at).toLocaleDateString()}</span>
                            </div>
                          </div>

                          <h2 className="text-xl font-bold text-gray-900 mb-3 group-hover:text-blue-600 transition-colors">
                            {post.title}
                          </h2>

                          <p className="text-gray-600 mb-4 line-clamp-3">
                            {formatContent(post.content)}
                          </p>

                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-2 text-sm text-gray-500">
                              <div className="flex items-center space-x-1">
                                <Eye className="h-4 w-4" />
                                <span>{Math.floor(Math.random() * 1000) + 100}</span>
                              </div>
                              <div className="flex items-center space-x-1">
                                <MessageSquare className="h-4 w-4" />
                                <span>{Math.floor(Math.random() * 20)}</span>
                              </div>
                              <div className="flex items-center space-x-1">
                                <Heart className="h-4 w-4" />
                                <span>{Math.floor(Math.random() * 50) + 5}</span>
                              </div>
                            </div>
                            <button 
                              className="px-4 py-2 bg-blue-600 text-white rounded-lg text-sm font-medium hover:bg-blue-700 transition-colors flex items-center space-x-2"
                              onClick={(e) => {
                                e.stopPropagation();
                                handleBlogClick(post);
                              }}
                            >
                              <span>Read Full Article</span>
                              <ArrowRight className="h-4 w-4" />
                            </button>
                          </div>
                        </div>
                      </article>
                    );
                  })}
                </div>

                {filteredPosts.length === 0 && !isLoading && (
                  <div className="text-center py-16">
                    <Search className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                    <h3 className="text-xl font-semibold text-gray-900 mb-2">No posts found</h3>
                    <p className="text-gray-600">
                      {blogPosts.length === 0 
                        ? 'No health alerts have been generated yet. The system is monitoring for signals.'
                        : 'Try adjusting your search terms or filters.'
                      }
                    </p>
                  </div>
                )}
              </>
            )}
          </div>
        </div>
      </section>

      {/* Featured Articles */}
      <section className="py-20 bg-gray-50">
        <div className="container mx-auto px-6">
          <div className="max-w-6xl mx-auto">
            <h2 className="text-3xl font-bold text-gray-900 mb-8 text-center">Featured Health Insights</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              <div className="bg-white rounded-xl shadow-lg overflow-hidden">
                <img 
                  src="https://images.pexels.com/photos/3786157/pexels-photo-3786157.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2" 
                  alt="Health professionals" 
                  className="w-full h-48 object-cover"
                />
                <div className="p-6">
                  <div className="flex items-center space-x-2 mb-3">
                    <div className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">
                      Research
                    </div>
                  </div>
                  <h3 className="text-xl font-bold text-gray-900 mb-3">
                    Early Detection Systems: The Future of Public Health
                  </h3>
                  <p className="text-gray-600 mb-4 line-clamp-3">
                    How AI-powered early warning systems are transforming our approach to disease prevention and public health management.
                  </p>
                  <button className="text-blue-600 font-medium hover:text-blue-700 flex items-center space-x-1">
                    <span>Read more</span>
                    <ArrowRight className="h-4 w-4" />
                  </button>
                </div>
              </div>
              
              <div className="bg-white rounded-xl shadow-lg overflow-hidden">
                <img 
                  src="https://images.pexels.com/photos/3938022/pexels-photo-3938022.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2" 
                  alt="Health technology" 
                  className="w-full h-48 object-cover"
                />
                <div className="p-6">
                  <div className="flex items-center space-x-2 mb-3">
                    <div className="px-3 py-1 bg-green-100 text-green-800 rounded-full text-xs font-medium">
                      Prevention
                    </div>
                  </div>
                  <h3 className="text-xl font-bold text-gray-900 mb-3">
                    Community-Based Approaches to Disease Prevention
                  </h3>
                  <p className="text-gray-600 mb-4 line-clamp-3">
                    How local communities can work together with health authorities to create effective prevention networks and response systems.
                  </p>
                  <button className="text-blue-600 font-medium hover:text-blue-700 flex items-center space-x-1">
                    <span>Read more</span>
                    <ArrowRight className="h-4 w-4" />
                  </button>
                </div>
              </div>
              
              <div className="bg-white rounded-xl shadow-lg overflow-hidden">
                <img 
                  src="https://images.pexels.com/photos/4031818/pexels-photo-4031818.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2" 
                  alt="Data visualization" 
                  className="w-full h-48 object-cover"
                />
                <div className="p-6">
                  <div className="flex items-center space-x-2 mb-3">
                    <div className="px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-xs font-medium">
                      Technology
                    </div>
                  </div>
                  <h3 className="text-xl font-bold text-gray-900 mb-3">
                    The Role of AI in Modern Epidemiology
                  </h3>
                  <p className="text-gray-600 mb-4 line-clamp-3">
                    How artificial intelligence is revolutionizing disease tracking, prediction, and prevention strategies worldwide.
                  </p>
                  <button className="text-blue-600 font-medium hover:text-blue-700 flex items-center space-x-1">
                    <span>Read more</span>
                    <ArrowRight className="h-4 w-4" />
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Sidebar Info */}
      <section className="py-20 bg-white">
        <div className="container mx-auto px-6">
          <div className="max-w-6xl mx-auto">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              <div className="bg-white rounded-2xl p-8 shadow-lg border border-gray-100">
                <AlertTriangle className="h-12 w-12 text-orange-600 mb-4" />
                <h3 className="text-xl font-bold text-gray-900 mb-4">Understanding Alerts</h3>
                <p className="text-gray-600 mb-4">
                  Our AI-generated alerts are early indicators based on signal patterns. They suggest trends worth monitoring, not medical diagnoses.
                </p>
                <button className="text-blue-600 font-medium hover:text-blue-700">Learn more →</button>
              </div>

              <div className="bg-white rounded-2xl p-8 shadow-lg border border-gray-100">
                <TrendingUp className="h-12 w-12 text-green-600 mb-4" />
                <h3 className="text-xl font-bold text-gray-900 mb-4">Prevention Tips</h3>
                <ul className="text-gray-600 space-y-2 text-sm">
                  <li>• Wear masks in crowded areas</li>
                  <li>• Practice good hand hygiene</li>
                  <li>• Stay home if symptomatic</li>
                  <li>• Ensure good ventilation</li>
                  <li>• Monitor local health updates</li>
                </ul>
              </div>

              <div className="bg-white rounded-2xl p-8 shadow-lg border border-gray-100">
                <Calendar className="h-12 w-12 text-purple-600 mb-4" />
                <h3 className="text-xl font-bold text-gray-900 mb-4">Stay Updated</h3>
                <p className="text-gray-600 mb-4">
                  Get real-time alerts and insights delivered when new signals are detected in your area.
                </p>
                <button className="px-4 py-2 bg-purple-600 text-white rounded-lg font-medium hover:bg-purple-700 transition-colors">
                  Subscribe to Alerts
                </button>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 bg-gradient-to-r from-blue-600 to-purple-600 text-white">
        <div className="container mx-auto px-6 text-center">
          <h2 className="text-4xl font-bold mb-6">Help us detect signals faster</h2>
          <p className="text-xl text-blue-100 mb-8">
            Join our network of contributors and help build a comprehensive early warning system for your community.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <button className="px-8 py-4 bg-white text-blue-600 rounded-lg font-semibold hover:shadow-lg transition-all duration-300">
              Contribute Data
            </button>
            <button className="px-8 py-4 border-2 border-white text-white rounded-lg font-semibold hover:bg-white hover:text-blue-600 transition-all duration-300">
              Partner with Us
            </button>
          </div>
        </div>
      </section>

      {/* Detailed Blog Modal */}
      {renderDetailedBlog()}
    </div>
  );
};

export default BlogPage;